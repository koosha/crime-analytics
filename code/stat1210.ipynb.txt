{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "from sklearn import linear_model, svm, tree\n",
    "from sklearn import preprocessing\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.model_selection import ShuffleSplit\n",
    "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
    "from sklearn.neural_network import MLPRegressor\n",
    "df = pd.read_csv('ready.csv')\n",
    "df = df.fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df.columns\n",
    "df = df[['Canadian Citizen', 'No Response(Citizen)', 'Non-Canadian Citizen',\n",
    "       'Refugee', 'No Longer In Use', 'Occupied', 'Unoccupied',\n",
    "       'Employed 0-30 Hours', 'Employed 30+ Hours', 'Gr.10 - Gr.12',\n",
    "       'Gr.7 - Gr.9', 'Homemaker', 'Kindergarten - Gr.6',\n",
    "       'No Response(Employment)', 'Permanently Unable to Work',\n",
    "       'Post Secondary Student', 'Preschool', 'Retired', 'Unemployed',\n",
    "       'Common Law', 'Married', 'Never Married', 'No Response(Marital)',\n",
    "       'Separated/Divorced', 'Widowed', 'Bicycle',\n",
    "       'Car/Truck/Van (as Driver)', 'Car/Truck/Van (as Passenger)',\n",
    "       'No Response(Transportation)', 'Other', 'Public Transit', 'Walk',\n",
    "       'Catholic', 'No Response(School)', 'Public', 'Assault', 'Break and Enter', 'Homicide',\n",
    "       'Robbery', 'Sexual Assaults', 'Theft From Vehicle', 'Theft Of Vehicle',\n",
    "       'Theft Over $5000']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def train_test_spliter(df, random_seed=0, test_size=0.20, n_splits=1):\n",
    "    # trainm = preprocessing.maxabs_scale(df, axis=0, copy=True)\n",
    "    col = df.columns\n",
    "    df1 = pd.DataFrame(data=df, columns=col)\n",
    "    rs = ShuffleSplit(n_splits=n_splits, test_size=test_size, random_state=random_seed)\n",
    "    for train_index, test_index in rs.split(df):\n",
    "        pass\n",
    "    traindf = pd.DataFrame(data=df, index=train_index)\n",
    "    testdf = pd.DataFrame(data=df, index=test_index)\n",
    "    return traindf, testdf\n",
    "\n",
    "\n",
    "traindf, testdf = train_test_spliter(df)\n",
    "\n",
    "X_train = pd.DataFrame(data=traindf, columns=['Canadian Citizen', 'No Response(Citizen)', 'Non-Canadian Citizen',\n",
    "       'Refugee', 'No Longer In Use', 'Occupied', 'Unoccupied',\n",
    "       'Employed 0-30 Hours', 'Employed 30+ Hours', 'Gr.10 - Gr.12',\n",
    "       'Gr.7 - Gr.9', 'Homemaker', 'Kindergarten - Gr.6',\n",
    "       'No Response(Employment)', 'Permanently Unable to Work',\n",
    "       'Post Secondary Student', 'Preschool', 'Retired', 'Unemployed',\n",
    "       'Common Law', 'Married', 'Never Married', 'No Response(Marital)',\n",
    "       'Separated/Divorced', 'Widowed', 'Bicycle',\n",
    "       'Car/Truck/Van (as Driver)', 'Car/Truck/Van (as Passenger)',\n",
    "       'No Response(Transportation)', 'Other', 'Public Transit', 'Walk',\n",
    "       'Catholic', 'No Response(School)', 'Public'])\n",
    "# X_train = preprocessing.maxabs_scale(X_train, axis=0, copy=True)\n",
    "\n",
    "Y_train = pd.DataFrame(data=traindf, columns=['Assault', 'Break and Enter', 'Homicide',\n",
    "       'Robbery', 'Sexual Assaults', 'Theft From Vehicle', 'Theft Of Vehicle',\n",
    "       'Theft Over $5000'])\n",
    "X_test = pd.DataFrame(data=testdf, columns=['Canadian Citizen', 'No Response(Citizen)', 'Non-Canadian Citizen',\n",
    "       'Refugee', 'No Longer In Use', 'Occupied', 'Unoccupied',\n",
    "       'Employed 0-30 Hours', 'Employed 30+ Hours', 'Gr.10 - Gr.12',\n",
    "       'Gr.7 - Gr.9', 'Homemaker', 'Kindergarten - Gr.6',\n",
    "       'No Response(Employment)', 'Permanently Unable to Work',\n",
    "       'Post Secondary Student', 'Preschool', 'Retired', 'Unemployed',\n",
    "       'Common Law', 'Married', 'Never Married', 'No Response(Marital)',\n",
    "       'Separated/Divorced', 'Widowed', 'Bicycle',\n",
    "       'Car/Truck/Van (as Driver)', 'Car/Truck/Van (as Passenger)',\n",
    "       'No Response(Transportation)', 'Other', 'Public Transit', 'Walk',\n",
    "       'Catholic', 'No Response(School)', 'Public'])\n",
    "X_test = preprocessing.maxabs_scale(X_test, axis=0, copy=True)\n",
    "\n",
    "Y_test = pd.DataFrame(data=testdf, columns=['Assault', 'Break and Enter', 'Homicide',\n",
    "       'Robbery', 'Sexual Assaults', 'Theft From Vehicle', 'Theft Of Vehicle',\n",
    "       'Theft Over $5000'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn import preprocessing\n",
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "X_scaled = preprocessing.scale(X_train)\n",
    "Y_scaled = preprocessing.scale(Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  2.70315171e-17,   1.02977208e-17,  -4.15126870e-17,\n",
       "         5.14886040e-18,  -7.07968306e-18,  -2.18826567e-17,\n",
       "        -1.73774039e-17,  -5.08449965e-17,  -7.01532230e-17,\n",
       "         3.82946493e-17,  -2.25262643e-17,  -5.72810720e-17,\n",
       "         7.72329061e-18,  -3.21803775e-18,   9.01050571e-18,\n",
       "        -3.08931624e-17,   6.62915777e-17,   2.38134794e-17,\n",
       "        -6.69351853e-17,  -7.20840457e-17,   2.70315171e-17,\n",
       "        -4.79487625e-17,  -2.96059473e-17,  -1.09413284e-17,\n",
       "         4.63397436e-17,   3.57202191e-17,  -1.09413284e-17,\n",
       "         6.43607551e-19,  -1.71360510e-17,  -5.08449965e-17,\n",
       "         2.25262643e-18,   1.35157586e-17,  -1.25503472e-17,\n",
       "        -6.62915777e-17,  -4.15126870e-17])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_scaled.mean(axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,\n",
       "        1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,\n",
       "        1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_scaled.std(axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.80711606642881806, 0.38367750028102771, 0.20481374137809025, 0.17980884030270702, 0.11183053453952706, 0.08349010891479397, 0.068004477844928413, 0.055149965259994341]\n",
      "[[  8.03315836e-01  -3.45466728e-01   5.74411120e-03  -2.87913653e-02\n",
      "    1.01554073e-02   1.12876404e-01   1.40490039e-02  -9.53095452e-02]\n",
      " [ -1.73749430e+00  -1.36842368e+00   7.59291667e-01   4.98095465e-01\n",
      "   -4.11653487e-01  -7.32137203e-01  -4.70623068e-01   2.68827458e+00]\n",
      " [  8.03315836e-01  -3.45466728e-01   5.74411120e-03  -2.87913653e-02\n",
      "    1.01554073e-02   1.12876404e-01   1.40490039e-02  -9.53095452e-02]\n",
      " [  8.03315836e-01  -3.45466728e-01   5.74411120e-03  -2.87913653e-02\n",
      "    1.01554073e-02   1.12876404e-01   1.40490039e-02  -9.53095452e-02]\n",
      " [ -6.09992366e+00   4.36213062e+00  -4.10465188e+00   7.53227135e+00\n",
      "   -5.96469368e+00   9.38717931e-01   1.33201068e+00  -3.64881547e+00]\n",
      " [ -1.31141048e+00   9.82915966e-01  -1.54037595e+00   8.17854952e-01\n",
      "    4.59531947e-01   8.60899045e-01   4.24580319e-01   1.30381302e+00]\n",
      " [ -7.03352618e-01  -7.64697530e-02   3.55321473e-02   5.74254222e-01\n",
      "   -5.73642795e-01   9.69987088e-02   1.91782830e-01  -7.69532658e-01]\n",
      " [  6.84846294e-01  -1.37889458e-01   3.11705005e-01  -6.04224508e-02\n",
      "    1.25429772e-01   1.34794289e-01  -7.18025393e-02  -1.14986881e-01]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.cross_decomposition import CCA\n",
    "n_components=8\n",
    "cca = CCA(n_components)\n",
    "cca.fit(X_scaled,Y_scaled)\n",
    "X_c, Y_c = cca.transform(X_scaled, Y_scaled)\n",
    "\n",
    "c = []\n",
    "for i in range(n_components):\n",
    "    c.append(np.corrcoef(X_c[:,i], Y_c[:,i])[0,1])\n",
    "\n",
    "print(c)\n",
    "    \n",
    "T = np.empty(shape=(n_components,n_components))\n",
    "for i in range(n_components):\n",
    "     T[i] = Y_c.T[:,i]\n",
    "        \n",
    "print(T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn import linear_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "regr = linear_model.LinearRegression()\n",
    "Y_star = Y_scaled * np.asmatrix(T)\n",
    "Y_hat = np.empty(shape=(len(X_scaled),8))\n",
    "\n",
    "for x in range(8):\n",
    "    regr.fit(X_scaled, Y_star[:,x])\n",
    "    Y_hat[:, x] = np.ndarray.flatten(regr.predict(X_scaled))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 2.22941451, -0.65375442,  1.23066356, ..., -0.38554792,\n",
       "        -0.36882072, -0.31033854],\n",
       "       [-4.31648393,  1.44316941, -2.51079152, ...,  0.72596331,\n",
       "         0.78517098, -0.21463541],\n",
       "       [ 2.22941451, -0.65375442,  1.23066356, ..., -0.38554792,\n",
       "        -0.36882072, -0.31033854],\n",
       "       ..., \n",
       "       [ 2.1879106 , -0.64984817,  1.2230952 , ..., -0.38652448,\n",
       "        -0.36772208, -0.28934244],\n",
       "       [ 0.94718794, -0.31262893,  0.74265697, ..., -0.26039533,\n",
       "        -0.20953422, -0.117559  ],\n",
       "       [ 2.22941451, -0.65375442,  1.23066356, ..., -0.38554792,\n",
       "        -0.36882072, -0.31033854]])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y_hat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.42400968140030704,\n",
       " 0.021473150930706092,\n",
       " 0.0016982915858584817,\n",
       " 0.00099806773154172113,\n",
       " 0.00013927591722924176,\n",
       " 4.0094602034454847e-05,\n",
       " 1.6579713916332103e-05,\n",
       " 6.9416626713172407e-06]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r = len(X_scaled.T)/len(X_scaled)\n",
    "dx=[]\n",
    "for i in range(len(c)):\n",
    "    dxi=((1-r)*(c[i]**2-r))/((1-r)**2)*c[i]**2+(r**2)*(1-c[i]**2)\n",
    "    if dxi<0:\n",
    "        dx.append(0)\n",
    "    else:\n",
    "        dx.append(dxi)\n",
    "dx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "matrix([[  9.45293335e-01,  -1.40381673e-02,   2.09002556e-03, ...,\n",
       "          -1.54583904e-05,  -6.11494196e-06,  -2.15426543e-06],\n",
       "        [ -1.83023098e+00,   3.09893946e-02,  -4.26405611e-03, ...,\n",
       "           2.91072101e-05,   1.30179103e-05,  -1.48992662e-06],\n",
       "        [  9.45293335e-01,  -1.40381673e-02,   2.09002556e-03, ...,\n",
       "          -1.54583904e-05,  -6.11494196e-06,  -2.15426543e-06],\n",
       "        ..., \n",
       "        [  9.27695277e-01,  -1.39542878e-02,   2.07717228e-03, ...,\n",
       "          -1.54975453e-05,  -6.09672694e-06,  -2.00851763e-06],\n",
       "        [  4.01616859e-01,  -6.71312817e-03,   1.26124808e-03, ...,\n",
       "          -1.04404472e-05,  -3.47401737e-06,  -8.16054890e-07],\n",
       "        [  9.45293335e-01,  -1.40381673e-02,   2.09002556e-03, ...,\n",
       "          -1.54583904e-05,  -6.11494196e-06,  -2.15426543e-06]])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dx = np.asmatrix(dx)\n",
    "Y_new = np.multiply(Y_hat, dx)\n",
    "Y_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "result=(Y_new * np.linalg.inv(np.asmatrix(T)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "matrix([[  9.12728906e+14,  -1.72504214e-01,  -2.10274229e+15, ...,\n",
       "          -1.19077385e-01,  -2.24569655e-01,  -9.93702906e-02],\n",
       "        [ -1.75916222e+15,   3.32761901e-01,   4.05864146e+15, ...,\n",
       "           2.30042261e-01,   4.33102620e-01,   1.95086275e-01],\n",
       "        [  9.12728906e+14,  -1.72504214e-01,  -2.10274229e+15, ...,\n",
       "          -1.19077385e-01,  -2.24569655e-01,  -9.93702906e-02],\n",
       "        ..., \n",
       "        [  8.95404909e+14,  -1.69238871e-01,  -2.06309984e+15, ...,\n",
       "          -1.16838660e-01,  -2.20289372e-01,  -9.76197167e-02],\n",
       "        [  3.88774256e+14,  -7.31271780e-02,  -8.92731740e+14, ...,\n",
       "          -5.06049339e-02,  -9.47143090e-02,  -4.23828437e-02],\n",
       "        [  9.12728906e+14,  -1.72504214e-01,  -2.10274229e+15, ...,\n",
       "          -1.19077385e-01,  -2.24569655e-01,  -9.93702906e-02]])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_squared_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.2953781856079804e+30"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_squared_error(Y_scaled, result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.2953781856079809e+30"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_squared_error(Y_train, result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "crimes = ['Assault', 'Break and Enter', 'Homicide', 'Robbery', 'Sexual Assaults',\n",
    "       'Theft From Vehicle', 'Theft Of Vehicle', 'Theft Over $5000']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[1510338621318495.0, 'Assault', 'Linear Regression'],\n",
       " [1.8067644105870351, 'Break and Enter', 'Linear Regression'],\n",
       " [3488399634215690.5, 'Homicide', 'Linear Regression'],\n",
       " [1978123031011947.2, 'Robbery', 'Linear Regression'],\n",
       " [0.49693393076651105, 'Sexual Assaults', 'Linear Regression'],\n",
       " [2.8372757248429941, 'Theft From Vehicle', 'Linear Regression'],\n",
       " [1.4609922366816115, 'Theft Of Vehicle', 'Linear Regression'],\n",
       " [0.33590054444014728, 'Theft Over $5000', 'Linear Regression']]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result1 = []\n",
    "for i in range(len(crimes)):\n",
    "    result1.append([np.sqrt(mean_squared_error(Y_train[crimes[i]], result[:,i])), crimes[i], 'Linear Regression'])\n",
    "    \n",
    "result1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda root]",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
